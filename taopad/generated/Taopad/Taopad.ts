// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AddToBlacklist extends ethereum.Event {
  get params(): AddToBlacklist__Params {
    return new AddToBlacklist__Params(this);
  }
}

export class AddToBlacklist__Params {
  _event: AddToBlacklist;

  constructor(event: AddToBlacklist) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Claim extends ethereum.Event {
  get params(): Claim__Params {
    return new Claim__Params(this);
  }
}

export class Claim__Params {
  _event: Claim;

  constructor(event: Claim) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Distribute extends ethereum.Event {
  get params(): Distribute__Params {
    return new Distribute__Params(this);
  }
}

export class Distribute__Params {
  _event: Distribute;

  constructor(event: Distribute) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OptIn extends ethereum.Event {
  get params(): OptIn__Params {
    return new OptIn__Params(this);
  }
}

export class OptIn__Params {
  _event: OptIn;

  constructor(event: OptIn) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OptOut extends ethereum.Event {
  get params(): OptOut__Params {
    return new OptOut__Params(this);
  }
}

export class OptOut__Params {
  _event: OptOut;

  constructor(event: OptOut) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RemoveFromBlacklist extends ethereum.Event {
  get params(): RemoveFromBlacklist__Params {
    return new RemoveFromBlacklist__Params(this);
  }
}

export class RemoveFromBlacklist__Params {
  _event: RemoveFromBlacklist;

  constructor(event: RemoveFromBlacklist) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Sweep extends ethereum.Event {
  get params(): Sweep__Params {
    return new Sweep__Params(this);
  }
}

export class Sweep__Params {
  _event: Sweep;

  constructor(event: Sweep) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Taopad extends ethereum.SmartContract {
  static bind(address: Address): Taopad {
    return new Taopad("Taopad", address);
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyFee(): i32 {
    let result = super.call("buyFee", "buyFee():(uint24)", []);

    return result[0].toI32();
  }

  try_buyFee(): ethereum.CallResult<i32> {
    let result = super.tryCall("buyFee", "buyFee():(uint24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  deadBlocks(): i32 {
    let result = super.call("deadBlocks", "deadBlocks():(uint8)", []);

    return result[0].toI32();
  }

  try_deadBlocks(): ethereum.CallResult<i32> {
    let result = super.tryCall("deadBlocks", "deadBlocks():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  emittedRewards(): BigInt {
    let result = super.call("emittedRewards", "emittedRewards():(uint256)", []);

    return result[0].toBigInt();
  }

  try_emittedRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "emittedRewards",
      "emittedRewards():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  emittedRewardsAcc(): BigInt {
    let result = super.call(
      "emittedRewardsAcc",
      "emittedRewardsAcc():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_emittedRewardsAcc(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "emittedRewardsAcc",
      "emittedRewardsAcc():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeDenominator(): i32 {
    let result = super.call("feeDenominator", "feeDenominator():(uint24)", []);

    return result[0].toI32();
  }

  try_feeDenominator(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "feeDenominator",
      "feeDenominator():(uint24)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  isBlacklisted(param0: Address): boolean {
    let result = super.call("isBlacklisted", "isBlacklisted(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_isBlacklisted(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isBlacklisted",
      "isBlacklisted(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOptin(param0: Address): boolean {
    let result = super.call("isOptin", "isOptin(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_isOptin(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOptin", "isOptin(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastEmittingBlock(): BigInt {
    let result = super.call(
      "lastEmittingBlock",
      "lastEmittingBlock():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_lastEmittingBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastEmittingBlock",
      "lastEmittingBlock():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marketingFee(): i32 {
    let result = super.call("marketingFee", "marketingFee():(uint24)", []);

    return result[0].toI32();
  }

  try_marketingFee(): ethereum.CallResult<i32> {
    let result = super.tryCall("marketingFee", "marketingFee():(uint24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  maxMarketingFee(): i32 {
    let result = super.call(
      "maxMarketingFee",
      "maxMarketingFee():(uint24)",
      [],
    );

    return result[0].toI32();
  }

  try_maxMarketingFee(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "maxMarketingFee",
      "maxMarketingFee():(uint24)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  maxSwapFee(): i32 {
    let result = super.call("maxSwapFee", "maxSwapFee():(uint24)", []);

    return result[0].toI32();
  }

  try_maxSwapFee(): ethereum.CallResult<i32> {
    let result = super.tryCall("maxSwapFee", "maxSwapFee():(uint24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  maxWallet(): BigInt {
    let result = super.call("maxWallet", "maxWallet():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxWallet(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxWallet", "maxWallet():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  operator(): Address {
    let result = super.call("operator", "operator():(address)", []);

    return result[0].toAddress();
  }

  try_operator(): ethereum.CallResult<Address> {
    let result = super.tryCall("operator", "operator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pairs(param0: Address): boolean {
    let result = super.call("pairs", "pairs(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_pairs(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("pairs", "pairs(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pendingRewards(addr: Address): BigInt {
    let result = super.call(
      "pendingRewards",
      "pendingRewards(address):(uint256)",
      [ethereum.Value.fromAddress(addr)],
    );

    return result[0].toBigInt();
  }

  try_pendingRewards(addr: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingRewards",
      "pendingRewards(address):(uint256)",
      [ethereum.Value.fromAddress(addr)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolFee(): i32 {
    let result = super.call("poolFee", "poolFee():(uint24)", []);

    return result[0].toI32();
  }

  try_poolFee(): ethereum.CallResult<i32> {
    let result = super.tryCall("poolFee", "poolFee():(uint24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  remainingRewards(): BigInt {
    let result = super.call(
      "remainingRewards",
      "remainingRewards():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_remainingRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "remainingRewards",
      "remainingRewards():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardBalance(): BigInt {
    let result = super.call("rewardBalance", "rewardBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardBalance",
      "rewardBalance():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardToken(): Address {
    let result = super.call("rewardToken", "rewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_rewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardToken", "rewardToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardTokenPerBlock(): BigInt {
    let result = super.call(
      "rewardTokenPerBlock",
      "rewardTokenPerBlock():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_rewardTokenPerBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardTokenPerBlock",
      "rewardTokenPerBlock():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  router(): Address {
    let result = super.call("router", "router():(address)", []);

    return result[0].toAddress();
  }

  try_router(): ethereum.CallResult<Address> {
    let result = super.tryCall("router", "router():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sellFee(): i32 {
    let result = super.call("sellFee", "sellFee():(uint24)", []);

    return result[0].toI32();
  }

  try_sellFee(): ethereum.CallResult<i32> {
    let result = super.tryCall("sellFee", "sellFee():(uint24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  startBlock(): BigInt {
    let result = super.call("startBlock", "startBlock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_startBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("startBlock", "startBlock():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapRouter(): Address {
    let result = super.call("swapRouter", "swapRouter():(address)", []);

    return result[0].toAddress();
  }

  try_swapRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall("swapRouter", "swapRouter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalRewardClaimed(): BigInt {
    let result = super.call(
      "totalRewardClaimed",
      "totalRewardClaimed():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalRewardClaimed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalRewardClaimed",
      "totalRewardClaimed():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRewardDistributed(): BigInt {
    let result = super.call(
      "totalRewardDistributed",
      "totalRewardDistributed():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalRewardDistributed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalRewardDistributed",
      "totalRewardDistributed():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalShares(): BigInt {
    let result = super.call("totalShares", "totalShares():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalShares", "totalShares():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    value: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AllocateCall extends ethereum.Call {
  get inputs(): AllocateCall__Inputs {
    return new AllocateCall__Inputs(this);
  }

  get outputs(): AllocateCall__Outputs {
    return new AllocateCall__Outputs(this);
  }
}

export class AllocateCall__Inputs {
  _call: AllocateCall;

  constructor(call: AllocateCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AllocateCall__Outputs {
  _call: AllocateCall;

  constructor(call: AllocateCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BurnFromCall extends ethereum.Call {
  get inputs(): BurnFromCall__Inputs {
    return new BurnFromCall__Inputs(this);
  }

  get outputs(): BurnFromCall__Outputs {
    return new BurnFromCall__Outputs(this);
  }
}

export class BurnFromCall__Inputs {
  _call: BurnFromCall;

  constructor(call: BurnFromCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnFromCall__Outputs {
  _call: BurnFromCall;

  constructor(call: BurnFromCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class CreateAmmPairWithCall extends ethereum.Call {
  get inputs(): CreateAmmPairWithCall__Inputs {
    return new CreateAmmPairWithCall__Inputs(this);
  }

  get outputs(): CreateAmmPairWithCall__Outputs {
    return new CreateAmmPairWithCall__Outputs(this);
  }
}

export class CreateAmmPairWithCall__Inputs {
  _call: CreateAmmPairWithCall;

  constructor(call: CreateAmmPairWithCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CreateAmmPairWithCall__Outputs {
  _call: CreateAmmPairWithCall;

  constructor(call: CreateAmmPairWithCall) {
    this._call = call;
  }
}

export class DistributeCall extends ethereum.Call {
  get inputs(): DistributeCall__Inputs {
    return new DistributeCall__Inputs(this);
  }

  get outputs(): DistributeCall__Outputs {
    return new DistributeCall__Outputs(this);
  }
}

export class DistributeCall__Inputs {
  _call: DistributeCall;

  constructor(call: DistributeCall) {
    this._call = call;
  }

  get amountOutMinimum(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DistributeCall__Outputs {
  _call: DistributeCall;

  constructor(call: DistributeCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RecordAmmPairWithCall extends ethereum.Call {
  get inputs(): RecordAmmPairWithCall__Inputs {
    return new RecordAmmPairWithCall__Inputs(this);
  }

  get outputs(): RecordAmmPairWithCall__Outputs {
    return new RecordAmmPairWithCall__Outputs(this);
  }
}

export class RecordAmmPairWithCall__Inputs {
  _call: RecordAmmPairWithCall;

  constructor(call: RecordAmmPairWithCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RecordAmmPairWithCall__Outputs {
  _call: RecordAmmPairWithCall;

  constructor(call: RecordAmmPairWithCall) {
    this._call = call;
  }
}

export class RemoveFromBlacklistCall extends ethereum.Call {
  get inputs(): RemoveFromBlacklistCall__Inputs {
    return new RemoveFromBlacklistCall__Inputs(this);
  }

  get outputs(): RemoveFromBlacklistCall__Outputs {
    return new RemoveFromBlacklistCall__Outputs(this);
  }
}

export class RemoveFromBlacklistCall__Inputs {
  _call: RemoveFromBlacklistCall;

  constructor(call: RemoveFromBlacklistCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveFromBlacklistCall__Outputs {
  _call: RemoveFromBlacklistCall;

  constructor(call: RemoveFromBlacklistCall) {
    this._call = call;
  }
}

export class RemoveLimitsCall extends ethereum.Call {
  get inputs(): RemoveLimitsCall__Inputs {
    return new RemoveLimitsCall__Inputs(this);
  }

  get outputs(): RemoveLimitsCall__Outputs {
    return new RemoveLimitsCall__Outputs(this);
  }
}

export class RemoveLimitsCall__Inputs {
  _call: RemoveLimitsCall;

  constructor(call: RemoveLimitsCall) {
    this._call = call;
  }
}

export class RemoveLimitsCall__Outputs {
  _call: RemoveLimitsCall;

  constructor(call: RemoveLimitsCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ResetEmittedRewardsUnsafeCall extends ethereum.Call {
  get inputs(): ResetEmittedRewardsUnsafeCall__Inputs {
    return new ResetEmittedRewardsUnsafeCall__Inputs(this);
  }

  get outputs(): ResetEmittedRewardsUnsafeCall__Outputs {
    return new ResetEmittedRewardsUnsafeCall__Outputs(this);
  }
}

export class ResetEmittedRewardsUnsafeCall__Inputs {
  _call: ResetEmittedRewardsUnsafeCall;

  constructor(call: ResetEmittedRewardsUnsafeCall) {
    this._call = call;
  }
}

export class ResetEmittedRewardsUnsafeCall__Outputs {
  _call: ResetEmittedRewardsUnsafeCall;

  constructor(call: ResetEmittedRewardsUnsafeCall) {
    this._call = call;
  }
}

export class RewardOptinCall extends ethereum.Call {
  get inputs(): RewardOptinCall__Inputs {
    return new RewardOptinCall__Inputs(this);
  }

  get outputs(): RewardOptinCall__Outputs {
    return new RewardOptinCall__Outputs(this);
  }
}

export class RewardOptinCall__Inputs {
  _call: RewardOptinCall;

  constructor(call: RewardOptinCall) {
    this._call = call;
  }
}

export class RewardOptinCall__Outputs {
  _call: RewardOptinCall;

  constructor(call: RewardOptinCall) {
    this._call = call;
  }
}

export class RewardOptoutCall extends ethereum.Call {
  get inputs(): RewardOptoutCall__Inputs {
    return new RewardOptoutCall__Inputs(this);
  }

  get outputs(): RewardOptoutCall__Outputs {
    return new RewardOptoutCall__Outputs(this);
  }
}

export class RewardOptoutCall__Inputs {
  _call: RewardOptoutCall;

  constructor(call: RewardOptoutCall) {
    this._call = call;
  }
}

export class RewardOptoutCall__Outputs {
  _call: RewardOptoutCall;

  constructor(call: RewardOptoutCall) {
    this._call = call;
  }
}

export class SetFeeCall extends ethereum.Call {
  get inputs(): SetFeeCall__Inputs {
    return new SetFeeCall__Inputs(this);
  }

  get outputs(): SetFeeCall__Outputs {
    return new SetFeeCall__Outputs(this);
  }
}

export class SetFeeCall__Inputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }

  get _buyFee(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _sellFee(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _marketingFee(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class SetFeeCall__Outputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }
}

export class SetPoolFeeCall extends ethereum.Call {
  get inputs(): SetPoolFeeCall__Inputs {
    return new SetPoolFeeCall__Inputs(this);
  }

  get outputs(): SetPoolFeeCall__Outputs {
    return new SetPoolFeeCall__Outputs(this);
  }
}

export class SetPoolFeeCall__Inputs {
  _call: SetPoolFeeCall;

  constructor(call: SetPoolFeeCall) {
    this._call = call;
  }

  get _poolFee(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetPoolFeeCall__Outputs {
  _call: SetPoolFeeCall;

  constructor(call: SetPoolFeeCall) {
    this._call = call;
  }
}

export class SetRewardTokenPerBlockCall extends ethereum.Call {
  get inputs(): SetRewardTokenPerBlockCall__Inputs {
    return new SetRewardTokenPerBlockCall__Inputs(this);
  }

  get outputs(): SetRewardTokenPerBlockCall__Outputs {
    return new SetRewardTokenPerBlockCall__Outputs(this);
  }
}

export class SetRewardTokenPerBlockCall__Inputs {
  _call: SetRewardTokenPerBlockCall;

  constructor(call: SetRewardTokenPerBlockCall) {
    this._call = call;
  }

  get _rewardTokenPerBlock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRewardTokenPerBlockCall__Outputs {
  _call: SetRewardTokenPerBlockCall;

  constructor(call: SetRewardTokenPerBlockCall) {
    this._call = call;
  }
}

export class SetRewardTokenPerBlockUnsafeCall extends ethereum.Call {
  get inputs(): SetRewardTokenPerBlockUnsafeCall__Inputs {
    return new SetRewardTokenPerBlockUnsafeCall__Inputs(this);
  }

  get outputs(): SetRewardTokenPerBlockUnsafeCall__Outputs {
    return new SetRewardTokenPerBlockUnsafeCall__Outputs(this);
  }
}

export class SetRewardTokenPerBlockUnsafeCall__Inputs {
  _call: SetRewardTokenPerBlockUnsafeCall;

  constructor(call: SetRewardTokenPerBlockUnsafeCall) {
    this._call = call;
  }

  get _rewardTokenPerBlock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRewardTokenPerBlockUnsafeCall__Outputs {
  _call: SetRewardTokenPerBlockUnsafeCall;

  constructor(call: SetRewardTokenPerBlockUnsafeCall) {
    this._call = call;
  }
}

export class SwapCollectedTaxCall extends ethereum.Call {
  get inputs(): SwapCollectedTaxCall__Inputs {
    return new SwapCollectedTaxCall__Inputs(this);
  }

  get outputs(): SwapCollectedTaxCall__Outputs {
    return new SwapCollectedTaxCall__Outputs(this);
  }
}

export class SwapCollectedTaxCall__Inputs {
  _call: SwapCollectedTaxCall;

  constructor(call: SwapCollectedTaxCall) {
    this._call = call;
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SwapCollectedTaxCall__Outputs {
  _call: SwapCollectedTaxCall;

  constructor(call: SwapCollectedTaxCall) {
    this._call = call;
  }
}

export class SweepCall extends ethereum.Call {
  get inputs(): SweepCall__Inputs {
    return new SweepCall__Inputs(this);
  }

  get outputs(): SweepCall__Outputs {
    return new SweepCall__Outputs(this);
  }
}

export class SweepCall__Inputs {
  _call: SweepCall;

  constructor(call: SweepCall) {
    this._call = call;
  }

  get otherToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SweepCall__Outputs {
  _call: SweepCall;

  constructor(call: SweepCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
